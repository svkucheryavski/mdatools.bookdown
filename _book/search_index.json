[
["introduction.html", "Getting started with mdatools for R Introduction", " Getting started with mdatools for R Sergey Kucheryavskiy 16 August 2016 Introduction This is a user guide for mdatools — R package for preprocessing, exploring and analysis of multivariate data. The package provides methods mostly common for Chemometrics. The general idea of the package is to collect the popular hemometric methods and give a similar “user interface” for using them. So if a user knows how to make a model and visualize results for one method, he or she can easily do this for the other methods as well. I decided to rewrite this tutorial in order to add more details and examples for the implemented methods. This is a pre-release version and I am still working on it. Also when new version of the package is released, there will be some changes/additions to the tutorial as well. You can track main changes in the text here. All methods implemented in the package were tested using well-known datasets. However, there still could be some bugs, in this case please report to svkucheryavski@gmail.com or use Issues tool at GitHub. You are also very welcome to share your comments and suggestions about the package functionality. "],
["what-is-new.html", "What is new", " What is new 09.09.2016 A new version (0.8.0) brings a lot of new features, therefore it was decided to rewrite this tutorial completely and start this log from the scratch. Most of the things available in the previous version of the package will work without any changes. But if you have been using functions mdaplot() and mdaplotg() it makes sense to read how the new implementation works and rewrite your code. The use of plotting tools became much simpler and more efficient. The main changes in the package are: added a possibility to assign some specific attributes to datasets, which makes plotting and some other operations easier added a possibility to exclude (hide) specific rows and columns from calculations without removing them physically via methods mda.exclrows(), mda.exclcols() if a data frame has factor columns they will be automatically converted to a set of dummy variables added several functions to make the operations with datasets containing specific attributes easier (mda.rbind(), mda.cbind(), mda.t(), mda.subset(), mda.show()) plotting tools (mdaplot(), mdaplotg()) were rewritten to make the use of them easier and more efficient most of the model and result specific plots now have additional options, e.g. you can use wavelength or wavenumbers when show plots for loadings, regression coefficients, etc. scores and loadings plots now show a percent of explained variance added support for images, see a specific chapter for details cross-validation procedure were optimized for most of the methods and now takes less time several bug fixes and small improvements "],
["overview.html", "Overview What mdatools can do? How to install", " Overview This package was created for an introductory PhD course on Chemometrics given at Department of Chemistry and Bioscience, Aalborg University. Quickly I found out that using R for this course (with all advantages it gives) needs a lot of routine work from students, since most of them were also beginners in R. Of course it is very good for understanding when students get to know e.g. how to calculate explained variance or residuals in PCA manually or make corresponding plots and so on, but for the introductory course these things (as well as numerous typos and small mistakes in a code) take too much time, which can be spent for explaining methods and proper interpretation of results. This is actually also true for everyday using of these methods, most of the routines can be written ones and simply reused with various options. So it was decided to write a package where most widely used chemometric methods for multivariate data analysis are implemented and which gives also a quick and easy-to-use access to results, produced by these methods. First of all numerous plots. Here how it works. Say, we need to make a PCA model for data matrix x with autoscaling. Then make an overview of most important plots and investigate scores and loadings for first three components. The mdatools solution will be: # make a model for autoscaled data with maximum possible number of components m = pca(x, scale = TRUE) # show explained variance plot plotVariance(m) # select optimal number of components (say, 4) for correct calculation of residuals m = selectCompNum(m, 4) # show plots for model overview plot(m) # show scores plot for PC1 and PC3 plotScores(m, c(1, 3)) # show loadings plot for the same components plotLoadings(m, c(1, 3)) # show the loadings as a set of bar plots plotLoadings(m, c(1, 3), type = &#39;h&#39;) Fairly simple, is not it? The other “routine”, which have been taken into account is validation — any model can be cross-validated or validated with a test set. The model object will contain the validation results, which will also appear on all model plots, etc. See the next chapters for details. What mdatools can do? The package includes classes and functions for analysis, preprocessing and plotting data and results. So far the following methods for analysis are implemented: Principal Component Analysis (PCA) Soft Independent Modelling of Class Analogy (SIMCA) Partial Least Squares regression (PLS) with calculation of VIP scores and Selectivity ratio Partial Least Squares Discriminant Analysis (PLS-DA) Randomization test for PLS regression models Interval PLS for variable selection Purity based method for spectral unmixing MCR-ALS in a very trivial form (so far) Preprocessing methods include: Mean centering, standardization and autoscaling Savitzky-Golay filter for smoothing and derivatives Standard Normal Variate for removing scatter effect from spectral data Mutliplicative Scatter Correction for the same issue Normalization of spectra to unit area or unit length More methods both for analysis and preprocessing are coming. Besides that, some extensions for the basic R plotting functionality have been also implemented and allow to do the following: Color grouping of objects with automatic color legend bar. Plot for several groups of objects with automatically calculated axes limits and plot legend. Two built-in color schemes — one is based on Colorbrewer and the other one is a grayscale scheme. Very easy-to-use possibility to apply any user defined color scheme. Possibility to show horizontal and vertical lines on the plot with automatically adjusted axes limits. Possibility to extend plotting functionality by using some attributes for datasets. See ?mdatools and next chapters for more details. How to install The package is available from CRAN by usual installing procedure. However due to restrictions in CRAN politics regarding number of submissions (once in 3-4 month) only major releases will be published there. To get the latest release plase use GitHub sources. You can either download a zip-file with the source package and install it using the install.packages command, e.g. if the downloaded file is mdatools_0.8.0.tar.gz and it is located in a current working directory, just run the following: install.packages(&#39;mdatools_0.8.0.tar.gz&#39;) If you have devtools package installed, the following command will install the latest release from the GitHub (do not forget to load the devtools package first): install_github(&#39;svkucheryavski/mdatools&#39;) "],
["datasets-and-plots.html", "1 Datasets and plots Attributes and factors Simple plots", " 1 Datasets and plots The package uses standard representation of the data in R: data frames, matrices and vectors. However, there are several additional methods and attributes, which make the use of the datasets a bit more more efficient. There is also a support for images. But if you are used to simple datasets and standard procedures and do not want any complications, you can simply skip this chapter. The package also uses its own set of plotting tools, which is a sort of an add-on for the R basic plotting system, extending its possibilities. From this point of view, learning how these tools work will simplify understanding of model plots a lot. The main improvements comparing to the basic plotting system are: Much easier way to make plots with groups of objects (points, lines, bars, etc.) Much easier way of adding legend to the group plots. Much easier way of adding labels to data points, bars, etc. Automatic axis limits when a plot contains several groups of objects. Possibility to color points and lines according to values of a specific numerical variable of a factor. Two built in color pallets and an easy way to use user specific set of colors. Much more! This chapter explains most of the details. Attributes and factors This section tells how to extend the functionality of the package by using attributes assigned to datasets and how the implemented methods deal with factors. Package specific attributes There are several groups of attributes, which allow to assign names and manual x-values to the datasets, exclude columns and rows from calculations without removing them physically as well as working with images. We will illustrate how to work with most of the attributes by using a simple dataset defined below. It consists of three variables Height, Weight, Shoesize and four records/objects/rows. d = matrix(c(190, 180, 170, 175, 85, 88, 70, 75, 44, 45, 38, 40), ncol = 3) colnames(d) = c(&#39;Height&#39;, &#39;Weight&#39;, &#39;Shoesize&#39;) rownames(d) = c(&#39;Bob&#39;, &#39;Peter&#39;, &#39;Lisa&#39;, &#39;Lena&#39;) d = as.data.frame(d) show(d) ## Height Weight Shoesize ## Bob 190 85 44 ## Peter 180 88 45 ## Lisa 170 70 38 ## Lena 175 75 40 Attributes for plots These attributes will be explained very briefly here, you can find much more details in the next two sections. The idea is to provide some names and values to the data, which can be used later e.g. for making labels and titles on the plots. When dataset is used to create a model (e.g. PCA) all results representing objects (e.g. scores, Q-residuals, T2-residuals, etc.) will inherit the row specific attributes and all results representing objects (e.g. loadings) will inherit column specific attributes. The attributes are following: Attribute Meaning name name of a dataset (used for plot parameter main) xaxis.name name for all data columns (used for plot parameter xlab) yaxis.name name for all data rows (used for plot parameter ylab) xaxis.values a vector of values, which correspond to the columns (e.g. for spectroscopic data it can be wavelength or wavenumbers) yaxis.values a vector of values, which correspond to the rows (e.g. for kinetic data it can be time or temperature of reaction) Here is a very simple example. attr(d, &#39;name&#39;) = &#39;People&#39; attr(d, &#39;xaxis.name&#39;) = &#39;Parameters&#39; attr(d, &#39;yaxis.name&#39;) = &#39;Persons&#39; par(mfrow = c(1, 2)) mdaplot(d, type = &#39;p&#39;) mdaplot(d, type = &#39;l&#39;) par(mfrow = c(1, 1)) See more details in the section about plots. Excluding/hiding rows and columns When we are working with models, one of the most common procedures is hiding outliers and irrelevant or not important variables. It can be done simply by removing corresponding rows and columns. However the more flexible way will be just to mark them as excluded, therefore it was decided to create some tools to make this part of data analysis a bit easier. The main idea is very simple. Any dataset (matrix or a data frame) may have two attributes: exclrows for rows that should not be used when model is created and exclcols — similar parameter for columns. The simplest way to excluded rows or columns is to provide number, names or a vector with logical values as a value of the attributes. However, especially when removing items is a sequential procedure and there are no names for rows or/and variables, it will be much easier to use the specific methods: mda.exclrows() and mda.exclcols(). Both functions take row or column numbers, names or a vector with logical values and convert them to indices taking into account the previously excluded objects. Here is an example of two step procedure for hiding/excluding objects using these methods. We will use another package specific method, mda.show(), which hides the excluded elements. Let’s start with showing the original dataset again. mda.show(d) ## People ## ------ ## Height Weight Shoesize ## Bob 190 85 44 ## Peter 180 88 45 ## Lisa 170 70 38 ## Lena 175 75 40 Now we will hide all rows with Height above 180 cm (actually this is only one row). d = mda.exclrows(d, d$Height &gt; 180) mda.show(d) ## People ## ------ ## Height Weight Shoesize ## Peter 180 88 45 ## Lisa 170 70 38 ## Lena 175 75 40 Then we exclude the second row from the available data. d = mda.exclrows(d, 2) mda.show(d) ## People ## ------ ## Height Weight Shoesize ## Peter 180 88 45 ## Lena 175 75 40 Show indices of the excluded rows. Note that the second row we excluded in the last step, was third in the original data and this index is kept in the attributes. attr(d, &#39;exclrows&#39;) ## [1] 1 3 We can also unhide the rows using the indices. d = mda.inclcols(d, c(1, 3)) mda.show(d) ## People ## ------ ## Height Weight Shoesize ## Peter 180 88 45 ## Lena 175 75 40 Working with columns is similar, but in this case you need to use method mda.exclcols(). What happen to the excluded items when one calibrates or apply a model, e.g. PCA? In this case the outcome, e.g. scores and loadings will correspond to the original size of the data, but: Loadings will be computed without hidden objects and variables Matrix with loadings will have zero values for the hidden variables and the corresponding columns will be also marked as excluded. Matrix with scores will have score values calculated for the hidden objects but the rows will be excluded. So you can always see the scores and e.g. residuals for the excluded objects if necessary. More details will be shown in the PCA chapter. 1.0.1 Special methods for data transformations Since data objects in R lose all user specified attributes when e.g. we transpose them or taking a subset it was decided to write several methods, which process attributes correctly. They also adjust indices of excluded rows and columns when user takes a subset or merge two data objects together. When data matrix is transposed the corresponding method will switch the x- and y- attributes. All methods with a brief description are listed in the table below (including the ones already introduces). Method Description mda.show(data) Show data object without excluded elements mda.exclrows(data, ind) Exclude (hide) rows from a data object mda.exclcols(data, ind) Exclude (hide) columns from a data object mda.inclrows(data, ind) Include (make visible) rows in a data object mda.inclcols(data, ind) Include (make visible) columns in a data object mda.t(data) Transpose data object mda.cbind(data1, data2, ...) Merge several datasets by columns mda.rbind(data1, data2, ...) Merge several datasets by rows mda.subset(data1, subset, select) Take a subset of data object (subset is numeric indices, names or logical values for rows, select — the same for columns) attrs = mda.getattr(data) Return all user specific attributes from an object data = mda.getattr(data, attrs) Assign user specific attributes to an object Data frames with factors All methods, implemented in the package, work with matrices, therefore, if a user provides data values as data frame, it is converted to matrix. From version 0.8.0 it is also possible to provide data frames with one or several factor columns. In this case all factors will be converted to dummy variables with values –1 and +1. You can also do it manually, by using function prep.df2mat() as this is shown in an example below. Let us first crate a simple data with a factor column. h = c(180, 175, 165, 190, 188) c = c(&#39;Gray&#39;, &#39;Green&#39;, &#39;Gray&#39;, &#39;Green&#39;, &#39;Blue&#39;) d = data.frame(Height = h, Eye.color = c) show(d) ## Height Eye.color ## 1 180 Gray ## 2 175 Green ## 3 165 Gray ## 4 190 Green ## 5 188 Blue And this is the result of converting it to a matrix. d.mat = mda.df2mat(d) show(d.mat) ## Height Eye.color.Blue Eye.color.Gray ## [1,] 180 0 1 ## [2,] 175 0 0 ## [3,] 165 0 1 ## [4,] 190 0 0 ## [5,] 188 1 0 The number of dummy variables is always the number of levels minus one. It is important to have level labels in all factor columns of the same data frame unique, as they are used for names of the dummy variables. If a factor is hidden it will be just converted to numeric values and remain excluded from modelling. Simple plots In this section we will look at how to make simple plots from your data objects. As it was already mentioned, mdatools has its own function for plotting with several extra options not available in R basic plot tools. If you are going to make all plots manually (e.g. using ggplot2) you can skip this and the next sections. How plots “see” the data object "]
]
